// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msmkdenis/yap-shortener/internal/service (interfaces: URLRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/msmkdenis/yap-shortener/internal/model"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockURLRepository) DeleteAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockURLRepositoryMockRecorder) DeleteAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockURLRepository)(nil).DeleteAll), arg0)
}

// DeleteURLByUserID mocks base method.
func (m *MockURLRepository) DeleteURLByUserID(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLByUserID indicates an expected call of DeleteURLByUserID.
func (mr *MockURLRepositoryMockRecorder) DeleteURLByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLByUserID", reflect.TypeOf((*MockURLRepository)(nil).DeleteURLByUserID), arg0, arg1, arg2)
}

// Insert mocks base method.
func (m *MockURLRepository) Insert(arg0 context.Context, arg1 model.URL) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockURLRepositoryMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockURLRepository)(nil).Insert), arg0, arg1)
}

// InsertAllOrUpdate mocks base method.
func (m *MockURLRepository) InsertAllOrUpdate(arg0 context.Context, arg1 []model.URL) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAllOrUpdate", arg0, arg1)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAllOrUpdate indicates an expected call of InsertAllOrUpdate.
func (mr *MockURLRepositoryMockRecorder) InsertAllOrUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAllOrUpdate", reflect.TypeOf((*MockURLRepository)(nil).InsertAllOrUpdate), arg0, arg1)
}

// Ping mocks base method.
func (m *MockURLRepository) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLRepositoryMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLRepository)(nil).Ping), arg0)
}

// SelectAll mocks base method.
func (m *MockURLRepository) SelectAll(arg0 context.Context) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", arg0)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockURLRepositoryMockRecorder) SelectAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockURLRepository)(nil).SelectAll), arg0)
}

// SelectAllByUserID mocks base method.
func (m *MockURLRepository) SelectAllByUserID(arg0 context.Context, arg1 string) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllByUserID", arg0, arg1)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllByUserID indicates an expected call of SelectAllByUserID.
func (mr *MockURLRepositoryMockRecorder) SelectAllByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllByUserID", reflect.TypeOf((*MockURLRepository)(nil).SelectAllByUserID), arg0, arg1)
}

// SelectByID mocks base method.
func (m *MockURLRepository) SelectByID(arg0 context.Context, arg1 string) (*model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", arg0, arg1)
	ret0, _ := ret[0].(*model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockURLRepositoryMockRecorder) SelectByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockURLRepository)(nil).SelectByID), arg0, arg1)
}

// SelectStats mocks base method.
func (m *MockURLRepository) SelectStats(arg0 context.Context) (*model.URLStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectStats", arg0)
	ret0, _ := ret[0].(*model.URLStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectStats indicates an expected call of SelectStats.
func (mr *MockURLRepositoryMockRecorder) SelectStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectStats", reflect.TypeOf((*MockURLRepository)(nil).SelectStats), arg0)
}
